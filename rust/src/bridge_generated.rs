#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::test_module::SimpleClass;

// Section: wire functions

fn wire_perform_search_impl(
    port_: MessagePort,
    query: impl Wire2Api<String> + UnwindSafe,
    sites_status: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "perform_search",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_query = query.wire2api();
            let api_sites_status = sites_status.wire2api();
            move |task_callback| Result::<_, ()>::Ok(perform_search(api_query, api_sites_status))
        },
    )
}
fn wire_create_simple_class_impl(port_: MessagePort, property: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, SimpleClass, _>(
        WrapInfo {
            debug_name: "create_simple_class",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_property = property.wire2api();
            move |task_callback| Result::<_, ()>::Ok(create_simple_class(api_property))
        },
    )
}
fn wire_print_simple_class_property_impl(
    port_: MessagePort,
    class_instance: impl Wire2Api<SimpleClass> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "print_simple_class_property",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_class_instance = class_instance.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(print_simple_class_property(api_class_instance))
            }
        },
    )
}
fn wire_get_simple_class_property_impl(
    port_: MessagePort,
    class_instance: impl Wire2Api<SimpleClass> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "get_simple_class_property",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_class_instance = class_instance.wire2api();
            move |task_callback| Result::<_, ()>::Ok(get_simple_class_property(api_class_instance))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for SimpleClass {
    fn into_dart(self) -> support::DartAbi {
        vec![self.property.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SimpleClass {}
impl rust2dart::IntoIntoDart<SimpleClass> for SimpleClass {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
